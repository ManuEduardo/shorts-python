#!/usr/bin/env python3
"""
Sistema de generaci√≥n de assets para videos de YouTube - Versi√≥n 2.1

Correcciones:
- Arregla el error de movimiento de archivos de audio
- Mejora el manejo de rutas y directorios
- Asegura que los directorios de destino existan
"""

import json
import os
import asyncio
import concurrent.futures
import shutil
from pathlib import Path
from typing import Dict, Any, Optional
from dataclasses import dataclass
from datetime import datetime
import logging

# Imports locales (asumiendo que est√°n en el mismo directorio)
from tts import SimpleTTS, TTSConfig
from image_downloader import ImageDownloader
from audio_trascriber import AudioTranscriber


@dataclass
class ProjectConfig:
    """Configuraci√≥n centralizada del proyecto"""
    # Paths base
    root_dir: Path = Path("projects")
    project_name: str = "default_project"
    
    # Archivos de entrada
    config_file: str = "video.json"
    script_file: str = "guion.txt"
    
    # APIs
    unsplash_key: Optional[str] = None
    pexels_key: Optional[str] = None
    pixabay_key: Optional[str] = None
    serpapi_key: Optional[str] = None
    
    # Configuraci√≥n de procesos
    max_workers: int = 3
    verbose: bool = True
    
    @property
    def project_dir(self) -> Path:
        """Directorio del proyecto actual"""
        return self.root_dir / self.project_name.replace(" ", "_")
    
    @property
    def assets_dir(self) -> Path:
        """Directorio de assets del proyecto"""
        return self.project_dir / "assets"
    
    @property
    def audio_dir(self) -> Path:
        """Directorio de audio"""
        return self.assets_dir / "audio"
    
    @property
    def images_dir(self) -> Path:
        """Directorio de im√°genes"""
        return self.assets_dir / "images"
    
    @property
    def subtitles_dir(self) -> Path:
        """Directorio de subt√≠tulos"""
        return self.assets_dir / "subtitles"
    
    @property
    def temp_dir(self) -> Path:
        """Directorio temporal"""
        return self.project_dir / "temp"
    
    def create_directories(self):
        """Crea toda la estructura de directorios"""
        directories = [
            self.project_dir,
            self.assets_dir,
            self.audio_dir,
            self.images_dir,
            self.subtitles_dir,
            self.temp_dir
        ]
        
        for directory in directories:
            directory.mkdir(parents=True, exist_ok=True)


class VideoAssetsGenerator:
    """Generador principal de assets para videos"""
    
    def __init__(self, config: ProjectConfig):
        self.config = config
        self.logger = self._setup_logger()
        self.video_data: Dict[str, Any] = {}
        
        # Crear estructura de directorios
        self.config.create_directories()
        
        # Cargar configuraci√≥n del video
        self._load_video_config()
        
    def _setup_logger(self) -> logging.Logger:
        """Configura el logger"""
        logger = logging.getLogger("VideoAssetsGenerator")
        logger.setLevel(logging.INFO if self.config.verbose else logging.WARNING)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            
        return logger
    
    def _load_video_config(self):
        """Carga la configuraci√≥n del video desde JSON"""
        try:
            config_path = Path(self.config.config_file)
            if config_path.exists():
                with open(config_path, "r", encoding="utf-8") as f:
                    self.video_data = json.load(f)
                    
                # Actualizar nombre del proyecto si est√° en el JSON
                if "title" in self.video_data:
                    self.config.project_name = self.video_data["title"]
                    
                self.logger.info(f"üìã Configuraci√≥n cargada: {self.video_data.get('title', 'Sin t√≠tulo')}")
            else:
                self.logger.warning(f"‚ö†Ô∏è Archivo de configuraci√≥n {config_path} no encontrado")
                
        except Exception as e:
            self.logger.error(f"‚ùå Error cargando configuraci√≥n: {e}")
    
    def _generate_images(self) -> bool:
        """Genera/descarga im√°genes para el proyecto"""
        try:
            self.logger.info("üñºÔ∏è Iniciando descarga de im√°genes...")
            
            # Obtener keywords del video_data o usar defaults
            keywords = self.video_data.get("keywords", ["video", "contenido"])
            google_keywords = self.video_data.get("google_keywords", keywords)
            
            downloader = ImageDownloader(
                project_name=str(self.config.images_dir),
                keywords=keywords,
                google_keywords=google_keywords,
                images_per_keyword=3,
                images_per_keyword_google=5,
                unsplash_key=self.config.unsplash_key,
                pexels_key=self.config.pexels_key,
                pixabay_key=self.config.pixabay_key,
                serpapi_key=self.config.serpapi_key
            )
            
            downloader.download_images()
            self.logger.info("‚úÖ Descarga de im√°genes completada")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå Error generando im√°genes: {e}")
            return False
    
    def _generate_audio(self) -> Optional[Path]:
        """Genera audio a partir del gui√≥n"""
        try:
            self.logger.info("üéôÔ∏è Iniciando generaci√≥n de audio...")
            
            # Verificar que existe el archivo de gui√≥n
            script_path = Path(self.config.script_file)
            if not script_path.exists():
                self.logger.error(f"‚ùå Archivo de gui√≥n no encontrado: {script_path}")
                return None
            
            # CORRECCI√ìN: Crear directorio temporal espec√≠fico para el TTS
            tts_temp_dir = self.config.project_dir / "tts_temp"
            tts_temp_dir.mkdir(parents=True, exist_ok=True)
            
            # Configuraci√≥n TTS personalizada
            tts_config = TTSConfig(
                remove_silence=True,
                silence_threshold=-40.0, # Umbral de silencio 
                min_silence_duration=0.4,
                keep_temp_files=False,
                verbose=self.config.verbose,
                root_dir=tts_temp_dir  # Usar directorio temporal espec√≠fico
            )
            
            tts = SimpleTTS(tts_config)
            
            # Generar audio con nombre basado en el proyecto
            audio_filename = f"{self.config.project_name.replace(' ', '_')}_audio.mp3"
            result = tts.process_file(script_path, audio_filename)
            
            if result:
                # CORRECCI√ìN: Asegurar que el directorio de destino existe
                self.config.audio_dir.mkdir(parents=True, exist_ok=True)
                
                # Mover el archivo generado a nuestro directorio de audio
                final_audio_path = self.config.audio_dir / audio_filename
                
                # CORRECCI√ìN: Verificar que el archivo fuente existe antes de mover
                if result.exists():
                    try:
                        # Usar shutil.move en lugar de rename para manejar cruces de sistemas de archivos
                        shutil.move(str(result), str(final_audio_path))
                        self.logger.info(f"‚úÖ Audio movido a: {final_audio_path}")
                    except Exception as move_error:
                        self.logger.warning(f"‚ö†Ô∏è Error moviendo archivo, intentando copia: {move_error}")
                        # Fallback: copiar y eliminar
                        shutil.copy2(str(result), str(final_audio_path))
                        if result.exists():
                            result.unlink()  # Eliminar archivo original
                        self.logger.info(f"‚úÖ Audio copiado a: {final_audio_path}")
                else:
                    self.logger.error(f"‚ùå El archivo de audio generado no existe: {result}")
                    return None
                
                self.logger.info(f"‚úÖ Audio generado: {final_audio_path}")
                return final_audio_path
            else:
                self.logger.error("‚ùå Error generando audio")
                return None
                
        except Exception as e:
            self.logger.error(f"‚ùå Error en generaci√≥n de audio: {e}")
            return None
    
    def _generate_subtitles(self, audio_path: Path) -> bool:
        """Genera subt√≠tulos a partir del audio"""
        try:
            self.logger.info("üìù Iniciando generaci√≥n de subt√≠tulos...")
            
            # Verificar que el archivo de audio existe
            if not audio_path.exists():
                self.logger.error(f"‚ùå Archivo de audio no encontrado: {audio_path}")
                return False
            
            # Asegurar que el directorio de subt√≠tulos existe
            self.config.subtitles_dir.mkdir(parents=True, exist_ok=True)
            
            transcriber = AudioTranscriber(
                audio_dir=str(audio_path.parent),
                output_dir=str(self.config.subtitles_dir),
                model_name="small",
                language="es",
                verbose=self.config.verbose
            )
            
            # Transcribir solo el archivo espec√≠fico
            srt_content = transcriber.transcribe_audio(audio_path)
            
            if srt_content:
                srt_filename = audio_path.stem + ".srt"
                transcriber._save_srt(srt_content, srt_filename)
                self.logger.info("‚úÖ Subt√≠tulos generados")
                return True
            else:
                self.logger.error("‚ùå No se pudo generar contenido de subt√≠tulos")
                return False
            
        except Exception as e:
            self.logger.error(f"‚ùå Error generando subt√≠tulos: {e}")
            return False
    
    async def generate_assets_parallel(self):
        """Genera todos los assets en paralelo"""
        self.logger.info("üöÄ Iniciando generaci√≥n de assets en paralelo...")
        start_time = datetime.now()
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=self.config.max_workers) as executor:
            # Proceso 1: Im√°genes (independiente)
            future_images = executor.submit(self._generate_images)
            
            # Proceso 2.1: Audio (debe completarse antes de subt√≠tulos)
            future_audio = executor.submit(self._generate_audio)
            
            # Esperar a que termine el audio para generar subt√≠tulos
            try:
                audio_path = future_audio.result(timeout=600)  # 10 minutos timeout
                
                if audio_path and audio_path.exists():
                    # Proceso 2.2: Subt√≠tulos (depende del audio)
                    future_subtitles = executor.submit(self._generate_subtitles, audio_path)
                    
                    # Esperar todos los procesos
                    images_success = future_images.result(timeout=300)
                    subtitles_success = future_subtitles.result(timeout=300)
                    
                    # Resultados
                    results = {
                        "images": images_success,
                        "audio": True,
                        "subtitles": subtitles_success,
                        "audio_path": audio_path
                    }
                    
                else:
                    # Si fall√≥ el audio, solo esperar im√°genes
                    images_success = future_images.result(timeout=300)
                    results = {
                        "images": images_success,
                        "audio": False,
                        "subtitles": False,
                        "audio_path": None
                    }
                    
            except concurrent.futures.TimeoutError:
                self.logger.error("‚è∞ Timeout en la generaci√≥n de assets")
                results = {
                    "images": False,
                    "audio": False,
                    "subtitles": False,
                    "audio_path": None
                }
        
        duration = datetime.now() - start_time
        self.logger.info(f"‚è±Ô∏è Generaci√≥n completada en {duration.total_seconds():.1f} segundos")
        
        return results
    
    def generate_assets_sequential(self):
        """Genera todos los assets secuencialmente (fallback)"""
        self.logger.info("üîÑ Generando assets secuencialmente...")
        
        # Proceso 1: Im√°genes
        images_success = self._generate_images()
        
        # Proceso 2.1: Audio
        audio_path = self._generate_audio()
        
        # Proceso 2.2: Subt√≠tulos (si el audio se gener√≥ correctamente)
        subtitles_success = False
        if audio_path and audio_path.exists():
            subtitles_success = self._generate_subtitles(audio_path)
        
        return {
            "images": images_success,
            "audio": audio_path is not None and audio_path.exists(),
            "subtitles": subtitles_success,
            "audio_path": audio_path
        }
    
    def print_summary(self, results: Dict[str, Any]):
        """Imprime resumen de resultados"""
        print("\n" + "="*50)
        print("üìä RESUMEN DE GENERACI√ìN DE ASSETS")
        print("="*50)
        
        print(f"üìÅ Proyecto: {self.config.project_name}")
        print(f"üìÇ Directorio: {self.config.project_dir}")
        print()
        
        # Status de cada proceso
        statuses = {
            "üñºÔ∏è Im√°genes": "‚úÖ Completado" if results["images"] else "‚ùå Error",
            "üéôÔ∏è Audio": "‚úÖ Completado" if results["audio"] else "‚ùå Error",
            "üìù Subt√≠tulos": "‚úÖ Completado" if results["subtitles"] else "‚ùå Error"
        }
        
        for process, status in statuses.items():
            print(f"{process}: {status}")
        
        # Informaci√≥n adicional
        if results["audio_path"] and results["audio_path"].exists():
            audio_size = results["audio_path"].stat().st_size / (1024*1024)
            print(f"üéµ Audio generado: {results['audio_path'].name} ({audio_size:.1f} MB)")
        
        # Contar im√°genes descargadas
        if self.config.images_dir.exists():
            image_count = len(list(self.config.images_dir.rglob("*.jpg"))) + \
                         len(list(self.config.images_dir.rglob("*.png")))
            print(f"üñºÔ∏è Im√°genes descargadas: {image_count}")
        
        success_count = sum([results["images"], results["audio"], results["subtitles"]])
        print(f"\nüéØ Procesos exitosos: {success_count}/3")
        
        if success_count == 3:
            print("üéâ ¬°Todos los assets generados correctamente!")
        elif success_count > 0:
            print("‚ö†Ô∏è Generaci√≥n parcial completada")
        else:
            print("‚ùå No se pudo generar ning√∫n asset")


async def main():
    """Funci√≥n principal"""
    print("üé¨ SISTEMA DE GENERACI√ìN DE ASSETS PARA VIDEOS v2.1")
    print("=" * 60)
    
    # Cargar variables de entorno
    from dotenv import load_dotenv
    load_dotenv()
    
    # Configuraci√≥n del proyecto
    config = ProjectConfig(
        config_file="video.json",
        script_file="guion.txt",
        unsplash_key=os.getenv('UNSPLASH_KEY'),
        pexels_key=os.getenv('PEXELS_KEY'),
        pixabay_key=os.getenv('PIXABAY_KEY'),
        serpapi_key=os.getenv('SERPAPI_KEY'),
        verbose=True
    )
    
    # Crear generador
    generator = VideoAssetsGenerator(config)
    
    try:
        # Intentar generaci√≥n en paralelo
        results = await generator.generate_assets_parallel()
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error en ejecuci√≥n paralela: {e}")
        print("üîÑ Cambiando a ejecuci√≥n secuencial...")
        results = generator.generate_assets_sequential()
    
    # Mostrar resumen
    generator.print_summary(results)


def main_sync():
    """Versi√≥n s√≠ncrona de main para compatibilidad"""
    asyncio.run(main())


if __name__ == "__main__":
    main_sync()